%token use
%token dims
%token dim
%token id
%token with
%token int
%token string
%token bool
%token type
%token property

%type Decls Decls
%type Decl Decl

%type Principle Principle
%type PrincipleFeat PrincipleFeat
%type Principles Principles
%type Dims Dims

%type Type Type
%type TypeDef TypeDef
%type Struct Struct

%type Properties Properties
%type Property Property
%type MaybeAbbrev MaybeAbbrev
%type Abbrev Abbrev

%type val val

%ext ODecl ODecl

%%

Decls : (Decl)* {$$=$1} ;

Decl : Principle {$$=$1} 
     | Type {$$=$1}
     | Property {$$=$1}
     | ODecl {$$=$1};

Principle : use id with '(' PrincipleFeat ')' dims '(' (dim)+ ')' {$$=principle($2,$5,$9)}; 

PrincipleFeat : id '=' id {$$=eq($1,$3)}
	      | id {$$=eq($1,none)}
	      | id '=' int {$$=eq($1,$3)}
	      | id '=' bool {$$=eq($1,$3)} 
	      | {$$=none} ;


Type : type id '=' TypeDef {$$=type($2,$4)} 
     | type id '!' {$$=type($2,label)}; 

TypeDef : '{' (val // ',')+ '}' {$$=enum($2)} 
	| '[' int '.' '.' int ']' {$$=range($2,$5)} 
	| '[' (Struct // ',')+ ']' {$$=struct($2)};

Struct : id ':' id {$$=struct($1,$3)};


Property : property id ':' id MaybeAbbrev {$$=property($2,$4,$5)};

MaybeAbbrev : '{' (Abbrev // ',')+ '}' {$$=$2} 
	    | {$$=none};

Abbrev : id '=' id   {$$=eq($1,$3)}
       | id '=' bool {$$=eq($1,$3)}
       | id '=' int  {$$=eq($1,$3)};


val : id {$$=$1} 
    | bool {$$=$1}
    | int {$$=$1};

%%
