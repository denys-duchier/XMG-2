
%%

Decls : (Decl)* {$$=$1} ;

Decl : Principle {$$=$1} 
     | Type {$$=$1}
     | Property {$$=$1}
     | _ODecl {$$=$1};

Principle : 'use' Id_or_constr 'with' '(' (PrincipleParam // ',')* ')' 'dims' '(' (id)+ ')' {$$=decls:principle($2,$5,$9)}; 

PrincipleParam : PrincipleFeat {$$=$1} |  id {$$=decls:principle_type($1)};

PrincipleFeat : id '=' id {$$=decls:eq($1,$3)}
	      /*| id {$$=eq($1,none)} */
	      | id '=' int {$$=decls:eq($1,$3)}
	      | id '=' bool {$$=decls:eq($1,$3)} ;


Type : 'type' id '=' TypeDef {$$=decls:type($2,$4)} 
     | 'type' id '!' {$$=decls:type($2,label)}; 

TypeDef : '{' (Val // ',')+ '}' {$$=decls:enum($2)} 
	| '[' int '.' '.' int ']' {$$=decls:range($2,$5)} 
	| TypeStruct {$$=$1};

TypeStruct : '[' (Struct // ',')* ']' {$$=decls:struct($2)}
	   | '[[' (Struct // ',')* ']]' {$$=decls:const_struct($2)};

Struct : id ':' id {$$=decls:structpair($1,$3)}
       | id ':' dimtype {$$=decls:structpair($1,$3)}
       | id ':' TypeStruct {$$=decls:structpair($1,$3)} ;


Property : 'property' id ':' id MaybeAbbrev {$$=decls:property($2,$4,$5)};

MaybeAbbrev : '{' (Abbrev // ',')+ '}' {$$=$2} 
	    | {$$=none};

Abbrev : id '=' id   {$$=decls:abb($1,$3)}
       | id '=' bool {$$=decls:abb($1,$3)}
       | id '=' int  {$$=decls:abb($1,$3)};


Val : id {$$=$1} 
    | bool {$$=$1}
    | int {$$=$1};

Id_or_constr :  id {$$=$1} 
	     /*| id ':' id {$$=constr($1,$3)}  the second id is a keyword */ 
	     | id ':' 'node' {$$=decls:constructor($1,$3)};
	     
%%
