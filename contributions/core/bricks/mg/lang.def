%token class
%token value
%token id
%token bool
%token int
%token as
%token int
%token close
%token mutex
%token semantics

%type MetaGrammar MetaGrammar

%type Mutex Mutex
%type Semantics Semantics

%type Class Class
%type Params Params
%type Imports Imports
%type IClass IClass
%type MaybeAs MaybeAs
%type AsList AsList
%type AsElem AsElem
%type Exports Exports
%type Decls Decls
%type Vars Vars
%type Var Var
%type ids ids
%type ids_coma ids_coma
%type val val
%type vals_coma vals_coma
%type Stmts Stmts

%type Values Values
%type Value Value

%ext EDecls EDecls
%ext Stmt Stmt

%%

MetaGrammar : EDecls (Class)+ (Value)+ { $$=..['mg',$1,$2,$3]};


Mutex : mutex id {$$=mutex($2)}| mutex id '+=' id {$$=mutex_add($2,$4)};

Semantics : semantics (id)+ {$$=semantics($2)};

Class :
       class ('**')? id (Params)? (Imports)? (Exports)? (Decls)? Stmts
       {$3=token(_,id(Class)), $$=..[Class,$4,$5,$6,$7,$8]}  
       	| Mutex 
	| Semantics;


Params : '[' ( id // ',')* ']' ;

Imports : 'import' (IClass)+ ;

IClass : id '[' (id)* ']' MaybeAs ;

MaybeAs : as '[' (AsElem)+  ']' | ;

AsElem : Var '=' Var | Var ;


Exports : 'export' Vars;


Decls : 'declare' Vars;


Stmts : '{' Stmt '}' | ;

    
Value : value id ;   
    

Vars : Var | Var Vars;

Var : '?' id | '!' id | id ;


ids : id | id ids ;

ids_coma : id | id ',' ids_coma;

val : id | bool | int;

vals_coma : val | val ',' vals_coma;

%%