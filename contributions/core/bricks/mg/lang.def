%token class
%token value
%token id
%token bool
%token int
%token as
%token int
%token close
%token mutex
%token semantics

%type MetaGrammar MetaGrammar

%type Mutex Mutex
%type Semantics Semantics

%type Class Class
%type Params Params
%type Imports Imports
%type IClass IClass
%type MaybeAs MaybeAs
%type AsElem AsElem
%type Exports Exports
%type Decls Decls
%type Var Var
%type Stmts Stmts

%type Values Values
%type Value Value

%ext EDecls EDecls
%ext Stmt Stmt

%%

MetaGrammar : EDecls (Class)+ (Value)+ { $$=..['mg',$1,$2,$3]};


Mutex : mutex id {$$=mutex($2)}| mutex id '+=' id {$$=mutex_add($2,$4)};

Semantics : semantics (id)+ {$$=semantics($2)};

Class :
       class ('**')? id (Params)? (Imports)? (Exports)? (Decls)? Stmts
       {$3=token(_,id(Class)), $$=..[Class,$4,$5,$6,$7,$8]}  
       	| Mutex {$$=$1}
	| Semantics {$$=$1};


Params : '[' ( id // ',')* ']' {$$=$2};

Imports : 'import' (IClass)+ {$$=import($2)};

IClass : id '[' (id)* ']' MaybeAs {$$=iclass($1,$3,$5)};

MaybeAs : as '[' (AsElem)+  ']' {$$=$3} | {$$=none};

AsElem : Var '=' Var {$$=as($1,$3)} 
       | Var {$$=as($1,none)};


Exports : 'export' (Var)+ {$$=export($2)};


Decls : 'declare' (Var)+ {$$=declare($2)};


Stmts : '{' Stmt '}' {$$=$2} 
      | {$$=none};

    
Value : value id {$$=value($2)};   
    

Var : '?' id {$$=var($2)} 
    | '!' id  {$$=const($2)}
    | id {$$=$1};


%%