%token id
%token node
%token edge

%type Var Var
%type FrameStmts FrameStmts
%type FrameStmt FrameStmt
%type Node Node

%type Tree Tree
%type Children Children
%type PropChild PropChild
%type Child Child

%type MaybeProps MaybeProps
%type Props Props
%type Feat Feat
%type Eq Eq
%type Edge Edge
%type Expr Expr

%ext AVM AVM

%%

FrameStmts : FrameStmt {$$=$1}
	   | FrameStmt ';' FrameStmts {$$=frame:and($1,$3)} 
	   | FrameStmt '|' FrameStmts {$$=frame:or($1,$3)}
	   | '{' FrameStmts '}' {$$=$2};

FrameStmt :  Node {$$=$1}
	  | Tree {$$=$1}
	  | Eq {$$=$1}
	  | Edge {$$=$1};

Node : node (Var)? MaybeProps (AVM)? {$$=frame:node($2,$3,$4)};

Tree : Node '{' Children '}' {$$=frame:tree($1,$3)};

Children : PropChild {$$=frame:children($1,none)}
	 | PropChild Children {$$=frame:children($1,brothers($2))};

PropChild : MaybeProps Child {$$=frame:propchild($1,$2)};

Child : Node {$$=$1} 
      | Tree {$$=$1};

MaybeProps : '(' Props ')' {$$=$2} | '' {$$=none};

Props : (Feat // ',')+ {$$=$1};
	 
Feat : id '=' id {$$=avm:feat($1,$3)}
     | id '=' int {$$=avm:feat($1,$3)}
     | id '=' bool {$$=avm:feat($1,$3)}
     | id {$$=avm:feat($1)};

Eq : Expr '=' Expr {$$=frame:eq($1,$3)};

Edge : edge MaybeProps Var Var {$$=frame:edge($2,$3,$4)};

Expr : id {$$=$1} 
     | string {$$=$1};

Var : id {$$=$1} 
    | '?' id {$$=$2};

%%
